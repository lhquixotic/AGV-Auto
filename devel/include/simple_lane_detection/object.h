// Generated by gencpp from file simple_lane_detection/object.msg
// DO NOT EDIT!


#ifndef SIMPLE_LANE_DETECTION_MESSAGE_OBJECT_H
#define SIMPLE_LANE_DETECTION_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace simple_lane_detection
{
template <class ContainerAllocator>
struct object_
{
  typedef object_<ContainerAllocator> Type;

  object_()
    : header()
    , left_cx_down(0.0)
    , left_cx_upper(0.0)
    , left_cy_down(0.0)
    , letf_cy_upper(0.0)
    , mid_cx_down(0.0)
    , mid_cx_upper(0.0)
    , mid_cy_down(0.0)
    , mid_cy_upper(0.0)
    , rig_cx_down(0.0)
    , rig_cx_upper(0.0)
    , rig_cy_down(0.0)
    , rig_cy_upper(0.0)  {
    }
  object_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left_cx_down(0.0)
    , left_cx_upper(0.0)
    , left_cy_down(0.0)
    , letf_cy_upper(0.0)
    , mid_cx_down(0.0)
    , mid_cx_upper(0.0)
    , mid_cy_down(0.0)
    , mid_cy_upper(0.0)
    , rig_cx_down(0.0)
    , rig_cx_upper(0.0)
    , rig_cy_down(0.0)
    , rig_cy_upper(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _left_cx_down_type;
  _left_cx_down_type left_cx_down;

   typedef float _left_cx_upper_type;
  _left_cx_upper_type left_cx_upper;

   typedef float _left_cy_down_type;
  _left_cy_down_type left_cy_down;

   typedef float _letf_cy_upper_type;
  _letf_cy_upper_type letf_cy_upper;

   typedef float _mid_cx_down_type;
  _mid_cx_down_type mid_cx_down;

   typedef float _mid_cx_upper_type;
  _mid_cx_upper_type mid_cx_upper;

   typedef float _mid_cy_down_type;
  _mid_cy_down_type mid_cy_down;

   typedef float _mid_cy_upper_type;
  _mid_cy_upper_type mid_cy_upper;

   typedef float _rig_cx_down_type;
  _rig_cx_down_type rig_cx_down;

   typedef float _rig_cx_upper_type;
  _rig_cx_upper_type rig_cx_upper;

   typedef float _rig_cy_down_type;
  _rig_cy_down_type rig_cy_down;

   typedef float _rig_cy_upper_type;
  _rig_cy_upper_type rig_cy_upper;





  typedef boost::shared_ptr< ::simple_lane_detection::object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple_lane_detection::object_<ContainerAllocator> const> ConstPtr;

}; // struct object_

typedef ::simple_lane_detection::object_<std::allocator<void> > object;

typedef boost::shared_ptr< ::simple_lane_detection::object > objectPtr;
typedef boost::shared_ptr< ::simple_lane_detection::object const> objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simple_lane_detection::object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simple_lane_detection::object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simple_lane_detection::object_<ContainerAllocator1> & lhs, const ::simple_lane_detection::object_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left_cx_down == rhs.left_cx_down &&
    lhs.left_cx_upper == rhs.left_cx_upper &&
    lhs.left_cy_down == rhs.left_cy_down &&
    lhs.letf_cy_upper == rhs.letf_cy_upper &&
    lhs.mid_cx_down == rhs.mid_cx_down &&
    lhs.mid_cx_upper == rhs.mid_cx_upper &&
    lhs.mid_cy_down == rhs.mid_cy_down &&
    lhs.mid_cy_upper == rhs.mid_cy_upper &&
    lhs.rig_cx_down == rhs.rig_cx_down &&
    lhs.rig_cx_upper == rhs.rig_cx_upper &&
    lhs.rig_cy_down == rhs.rig_cy_down &&
    lhs.rig_cy_upper == rhs.rig_cy_upper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simple_lane_detection::object_<ContainerAllocator1> & lhs, const ::simple_lane_detection::object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simple_lane_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::simple_lane_detection::object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simple_lane_detection::object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_lane_detection::object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_lane_detection::object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_lane_detection::object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_lane_detection::object_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simple_lane_detection::object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10f6e7b97734158810c589b4cdb3ff51";
  }

  static const char* value(const ::simple_lane_detection::object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10f6e7b977341588ULL;
  static const uint64_t static_value2 = 0x10c589b4cdb3ff51ULL;
};

template<class ContainerAllocator>
struct DataType< ::simple_lane_detection::object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simple_lane_detection/object";
  }

  static const char* value(const ::simple_lane_detection::object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simple_lane_detection::object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float32 left_cx_down \n"
"float32 left_cx_upper\n"
"float32 left_cy_down \n"
"float32 letf_cy_upper\n"
"\n"
"float32 mid_cx_down\n"
"float32 mid_cx_upper \n"
"float32 mid_cy_down \n"
"float32 mid_cy_upper \n"
"\n"
"float32 rig_cx_down \n"
"float32 rig_cx_upper \n"
"float32 rig_cy_down \n"
"float32 rig_cy_upper \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::simple_lane_detection::object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simple_lane_detection::object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left_cx_down);
      stream.next(m.left_cx_upper);
      stream.next(m.left_cy_down);
      stream.next(m.letf_cy_upper);
      stream.next(m.mid_cx_down);
      stream.next(m.mid_cx_upper);
      stream.next(m.mid_cy_down);
      stream.next(m.mid_cy_upper);
      stream.next(m.rig_cx_down);
      stream.next(m.rig_cx_upper);
      stream.next(m.rig_cy_down);
      stream.next(m.rig_cy_upper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simple_lane_detection::object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simple_lane_detection::object_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_cx_down: ";
    Printer<float>::stream(s, indent + "  ", v.left_cx_down);
    s << indent << "left_cx_upper: ";
    Printer<float>::stream(s, indent + "  ", v.left_cx_upper);
    s << indent << "left_cy_down: ";
    Printer<float>::stream(s, indent + "  ", v.left_cy_down);
    s << indent << "letf_cy_upper: ";
    Printer<float>::stream(s, indent + "  ", v.letf_cy_upper);
    s << indent << "mid_cx_down: ";
    Printer<float>::stream(s, indent + "  ", v.mid_cx_down);
    s << indent << "mid_cx_upper: ";
    Printer<float>::stream(s, indent + "  ", v.mid_cx_upper);
    s << indent << "mid_cy_down: ";
    Printer<float>::stream(s, indent + "  ", v.mid_cy_down);
    s << indent << "mid_cy_upper: ";
    Printer<float>::stream(s, indent + "  ", v.mid_cy_upper);
    s << indent << "rig_cx_down: ";
    Printer<float>::stream(s, indent + "  ", v.rig_cx_down);
    s << indent << "rig_cx_upper: ";
    Printer<float>::stream(s, indent + "  ", v.rig_cx_upper);
    s << indent << "rig_cy_down: ";
    Printer<float>::stream(s, indent + "  ", v.rig_cy_down);
    s << indent << "rig_cy_upper: ";
    Printer<float>::stream(s, indent + "  ", v.rig_cy_upper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMPLE_LANE_DETECTION_MESSAGE_OBJECT_H
