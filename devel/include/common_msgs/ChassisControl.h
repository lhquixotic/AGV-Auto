// Generated by gencpp from file common_msgs/ChassisControl.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_CHASSISCONTROL_H
#define COMMON_MSGS_MESSAGE_CHASSISCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct ChassisControl_
{
  typedef ChassisControl_<ContainerAllocator> Type;

  ChassisControl_()
    : header()
    , acc_request(0.0)
    , acc_control_mode(0)
    , acc_loop_number(0)
    , acc_pedal_open_request(0)
    , brk_pedal_open_request(0)
    , steer_enable(0)
    , steer_angle_velocity(0.0)
    , steer_angle(0.0)  {
    }
  ChassisControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , acc_request(0.0)
    , acc_control_mode(0)
    , acc_loop_number(0)
    , acc_pedal_open_request(0)
    , brk_pedal_open_request(0)
    , steer_enable(0)
    , steer_angle_velocity(0.0)
    , steer_angle(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _acc_request_type;
  _acc_request_type acc_request;

   typedef int32_t _acc_control_mode_type;
  _acc_control_mode_type acc_control_mode;

   typedef int32_t _acc_loop_number_type;
  _acc_loop_number_type acc_loop_number;

   typedef int32_t _acc_pedal_open_request_type;
  _acc_pedal_open_request_type acc_pedal_open_request;

   typedef int32_t _brk_pedal_open_request_type;
  _brk_pedal_open_request_type brk_pedal_open_request;

   typedef int32_t _steer_enable_type;
  _steer_enable_type steer_enable;

   typedef double _steer_angle_velocity_type;
  _steer_angle_velocity_type steer_angle_velocity;

   typedef double _steer_angle_type;
  _steer_angle_type steer_angle;





  typedef boost::shared_ptr< ::common_msgs::ChassisControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::ChassisControl_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisControl_

typedef ::common_msgs::ChassisControl_<std::allocator<void> > ChassisControl;

typedef boost::shared_ptr< ::common_msgs::ChassisControl > ChassisControlPtr;
typedef boost::shared_ptr< ::common_msgs::ChassisControl const> ChassisControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::ChassisControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::ChassisControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::ChassisControl_<ContainerAllocator1> & lhs, const ::common_msgs::ChassisControl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.acc_request == rhs.acc_request &&
    lhs.acc_control_mode == rhs.acc_control_mode &&
    lhs.acc_loop_number == rhs.acc_loop_number &&
    lhs.acc_pedal_open_request == rhs.acc_pedal_open_request &&
    lhs.brk_pedal_open_request == rhs.brk_pedal_open_request &&
    lhs.steer_enable == rhs.steer_enable &&
    lhs.steer_angle_velocity == rhs.steer_angle_velocity &&
    lhs.steer_angle == rhs.steer_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::ChassisControl_<ContainerAllocator1> & lhs, const ::common_msgs::ChassisControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::ChassisControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::ChassisControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::ChassisControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::ChassisControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::ChassisControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::ChassisControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::ChassisControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4a7a2ade840279ee54283672cf94d29";
  }

  static const char* value(const ::common_msgs::ChassisControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4a7a2ade840279eULL;
  static const uint64_t static_value2 = 0xe54283672cf94d29ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::ChassisControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/ChassisControl";
  }

  static const char* value(const ::common_msgs::ChassisControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::ChassisControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float64 acc_request\n"
"int32 acc_control_mode\n"
"int32 acc_loop_number\n"
"int32 acc_pedal_open_request\n"
"int32 brk_pedal_open_request\n"
"\n"
"int32 steer_enable\n"
"float64 steer_angle_velocity\n"
"float64 steer_angle\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::common_msgs::ChassisControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::ChassisControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.acc_request);
      stream.next(m.acc_control_mode);
      stream.next(m.acc_loop_number);
      stream.next(m.acc_pedal_open_request);
      stream.next(m.brk_pedal_open_request);
      stream.next(m.steer_enable);
      stream.next(m.steer_angle_velocity);
      stream.next(m.steer_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::ChassisControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::ChassisControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "acc_request: ";
    Printer<double>::stream(s, indent + "  ", v.acc_request);
    s << indent << "acc_control_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acc_control_mode);
    s << indent << "acc_loop_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acc_loop_number);
    s << indent << "acc_pedal_open_request: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acc_pedal_open_request);
    s << indent << "brk_pedal_open_request: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brk_pedal_open_request);
    s << indent << "steer_enable: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_enable);
    s << indent << "steer_angle_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.steer_angle_velocity);
    s << indent << "steer_angle: ";
    Printer<double>::stream(s, indent + "  ", v.steer_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_CHASSISCONTROL_H
